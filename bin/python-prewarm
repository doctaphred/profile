#!/usr/bin/env python
"""Compile all .py files on sys.path, or child directories thereof.

If positional args are provided, recursively compiles those paths
instead.

`python -m compileall` module doesn't quite do this: when run with no
args, it calls `compile_path` with `maxlevels=0`, which compiles .py
files directly on `sys.path`, but skips packages.

`python -c 'import compileall; compileall.compile_path(maxdepth=10)` is
closer, but spams stdout with expected errors, and has an arbitrary
depth limit. (Recent versions support multiprocessing, though!)

Depending on the directory structure of packages on sys.path, this
script may end up compiling files which cannot be conventionally
imported (e.g., in a subdirectory without an `__init__.py`); but no code
is executed during the compilation process, so this should be harmless.
"""
import os
import py_compile
import sys
from collections import Counter


counts = Counter()


def count(name):
    counts[name] += 1


def prewarm(where, count=count):
    where = os.path.realpath(where)
    print("Compiling all .py files in {}".format(where))
    for dirpath, _, filenames in os.walk(where):
        count("Visited {} paths")
        for name in filenames:
            count("Counted {} files")
            if name.endswith('.py'):
                path = os.path.join(dirpath, name)
                count("{} compilations attempted")
                try:
                    # Many packages distribute multiple versions of
                    # their source for compatibility with different
                    # syntax versions, and the Python standard library
                    # includes several modules which fail to compile
                    # (e.g., `python -m test.bad_coding`).
                    #
                    # If doraise=False (the default), an error message
                    # is printed to stderr. Instead, suppress the
                    # output, note the exception type, and include it in
                    # the aggregate report at the end.
                    py_compile.compile(path, doraise=True)
                except py_compile.PyCompileError as exc:
                    count("{} compilations failed with " + exc.exc_type_name)
                except Exception as exc:
                    name = type(exc).__name__
                    count("{} unexpected " + name)
                    print("ERROR {}: {}".format(
                        exc.exc_type_name,
                        exc.file,
                    ))
                else:
                    count("{} compilations succeeded")


paths = sys.argv[1:] or sys.path[1:]
for path in paths:
    prewarm(path)


print("\nFinished prewarming:")
for k, v in counts.items():
    print(k.format(v))
